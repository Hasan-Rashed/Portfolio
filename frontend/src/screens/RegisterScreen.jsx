import { useState, useEffect } from "react"
import { Link, useNavigate } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import { Form, Button, Row, Col } from 'react-bootstrap'
import FormContainer from "../components/FormContainer";
import { toast } from 'react-toastify';
import Loader from "../components/Loader";
import { useRegisterMutation } from "../slices/usersApiSlice";
import { setCredentials } from "../slices/authSlice";



const RegisterScreen = () => {
    const [name, setName] = useState('');
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');

    // initialize navigate hook and dispatch hook
    const navigate = useNavigate();
    const dispatch = useDispatch();

    // get the user data or the `userInfo` state from the Redux store. if userInfo is not null, then the user is already logged in and we can redirect them to the home page.
    const { userInfo } = useSelector((state) => state.auth); // auth is the part of our state we want, auth is the  slice. it consists userInfo.

    /* `useRegisterMutation()` is a custom hook generated by the `createApi` function from the `@reduxjs/toolkit/query` package. It returns an object with a `mutate`
    function that can be used to send a POST request to the server to register a new user. */
    const [register, { isLoading }] = useRegisterMutation();
    
    useEffect(() => {
        // if the user is already logged in, redirect to the home page
        if(userInfo) {
            navigate('/');
        }
    }, [navigate, userInfo]); //  useEffect will run when navigate or userInfo changes. navigate and userInfo are the dependencies of useEffect hook.

    
    // `submitHandler` is an async function that will be called when the form is submitted. It will make a POST request to the server to register the user with the provided name, email, and password.
    const submitHandler = async (e) => {
        e.preventDefault();

        if(password !== confirmPassword) {
            toast.error('Passwords does not match');
        }else{
            try {
                // res is the response which is user,  we get from the server after logging in the user. we can use the response to get the user data and save it in the Redux store.
                const res = await register({ name, email, password }).unwrap(); // email and pass are data coming from the form

                // set the res data to the local storage into our state using setCredentails action
                dispatch(setCredentials({...res})) // setting user data to local storage into our state, that means going to log in. (...res is the spread operator which will spread the res data into the object. )
                navigate('/');
            } catch (err) {
                // console.log(err?.data?.message || err.error);
                // alert(err?.data?.message || err.error); // ? after err is optional chaining. if err.data is not there then it will not throw error.
                toast.error(err?.data?.message || err.error);
            }
        }
    }
    
  return (
    <FormContainer>
        <h1>Sign Up</h1>

        <Form onSubmit={submitHandler} >
            <Form.Group className="my-2" controlId="name" >
                <Form.Label>Name</Form.Label>
                <Form.Control
                    type="text"
                    placeholder="Enter Your Name"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                >
                </Form.Control>
            </Form.Group>

            <Form.Group className="my-2" controlId="email" >
                <Form.Label>Email Address</Form.Label>
                <Form.Control
                    type="email"
                    placeholder="Enter email address"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                >
                </Form.Control>
            </Form.Group>
            
            <Form.Group className="my-2" controlId="password" >
                <Form.Label>Password</Form.Label>
                <Form.Control
                    type="password"
                    placeholder="Enter Password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                >
                </Form.Control>
            </Form.Group>
            
            <Form.Group className="my-2" controlId="confirmPassword" >
                <Form.Label>Confirm Password</Form.Label>
                <Form.Control
                    type="password"
                    placeholder="Confirm Password"
                    value={confirmPassword}
                    onChange={(e) => setConfirmPassword(e.target.value)}
                >
                </Form.Control>
            </Form.Group>

            {/* Loader component */}
            { isLoading && <Loader /> }

            <Button type='submit' variant='primary' className="mt-3" >
                Sign Up
            </Button>

            <Row className="py-3">
                <Col>
                    Already have an account? <Link to='/login' >Login</Link>
                </Col>
            </Row>
        </Form>
    </FormContainer>
  )
}

export default RegisterScreen;